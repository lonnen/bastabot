diff --git a/lib/bayesian/backends/localStorage.js b/lib/bayesian/backends/localStorage.js
index 51549a9..918b382 100644
--- a/lib/bayesian/backends/localStorage.js
+++ b/lib/bayesian/backends/localStorage.js
@@ -9,13 +9,15 @@ var LocalStorageBackend = function(options) {
   
   if(options.testing)
     localStorage = {};
+    
+  localStorage[this.prefix + '.cats'] = '{}';
 }
 
 LocalStorageBackend.prototype = {
   async : false,
 
   getCats : function() {
-    return JSON.parse(localStorage[this.prefix + '.cats'] || '{}');
+    return JSON.parse(localStorage[this.prefix + '.cats']);
   },
   
   setCats : function(cats) {
@@ -52,6 +54,24 @@ LocalStorageBackend.prototype = {
       }, this);
       this.setWordCount(word, wordCounts);
     }, this);
+  },
+
+  toJSON : function() {
+    var words = {};
+    var regex = new RegExp("^" + this.prefix + "\.words\.(.+)$")
+    for(item in localStorage) {
+      var match = regex.exec(item);
+      if(match)
+        words[match[1]] = JSON.parse(localStorage[item]);
+    }
+    return {
+      cats: JSON.parse(localStorage[this.prefix + '.cats']),
+      words: words
+    };
+  },
+  
+  fromJSON : function(json) {
+    this.incCounts(json.cats, json.words);
   }
 }
 
diff --git a/lib/bayesian/backends/memory.js b/lib/bayesian/backends/memory.js
index 2695fba..8de40d0 100644
--- a/lib/bayesian/backends/memory.js
+++ b/lib/bayesian/backends/memory.js
@@ -28,6 +28,15 @@ MemoryBackend.prototype = {
 
   getWordCounts : function(words, cats) {
     return this.wordCounts;
+  },
+  
+  toJSON : function() {
+    return {cats: this.catCounts, words: this.wordCounts}
+  },
+  
+  fromJSON : function(json) {
+    this.catCounts = json.cats;
+    this.wordCounts = json.words;
   }
 }
 
diff --git a/lib/bayesian/backends/redis.js b/lib/bayesian/backends/redis.js
index 507f963..3fccb3a 100644
--- a/lib/bayesian/backends/redis.js
+++ b/lib/bayesian/backends/redis.js
@@ -51,7 +51,8 @@ RedisBackend.prototype = {
 
     var that = this;
     multi.exec(function(err, ret) {
-      callback(ret);
+      if(callback)
+        callback(ret);
       client.quit();
     });
   },
@@ -90,6 +91,28 @@ RedisBackend.prototype = {
       client.quit();
     });
   },
+  
+  toJSON: function(callback) {
+    var client = this.client();
+    var that = this;
+    this.getCats(function(cats) {
+      client.hgetall(that.wordsKey, function(err, wordCounts) {
+        var words = {};
+        for(key in wordCounts) {
+          var pair = that.pair(key);
+          var word = pair[0], cat = pair[1];
+          words[word] = words[word] ? words[word] : {};
+          words[word][cat] = parseInt(wordCounts[key]) || 0;
+        }
+        callback({cats: cats, words: words});
+        client.quit();
+      });
+    });
+  },
+  
+  fromJSON: function(json, callback) {
+    this.incCounts(json.cats, json.words, callback); 
+  }
 }
 
 exports.RedisBackend = RedisBackend;
\ No newline at end of file
diff --git a/lib/bayesian/bayesian.js b/lib/bayesian/bayesian.js
index f81b55f..541adb2 100644
--- a/lib/bayesian/bayesian.js
+++ b/lib/bayesian/bayesian.js
@@ -163,6 +163,15 @@ BayesianClassifier.prototype = {
       error += output == datum.output ? 0 : 1;
     }, this);
     return error / data.length;
+  },
+  
+  toJSON : function(callback) {
+    return this.backend.toJSON(callback);
+  },
+  
+  fromJSON : function(json, callback) {
+    this.backend.fromJSON(json, callback);
+    return this;
   }
 }
 
diff --git a/test/sanity/bayesian/json.js b/test/sanity/bayesian/json.js
index 0b4b430..61832df 100644
--- a/test/sanity/bayesian/json.js
+++ b/test/sanity/bayesian/json.js
@@ -1,51 +1,53 @@
 var assert = require('assert'),
-    brain = require("../../../lib/brain"),
-    _ = require("underscore")._;
+    brain = require("../../../lib/brain");
 
-function testBasic(bayes) {
-  var spam = ["vicodin pharmacy on",
-              "cheap replica watches",
-              "viagra pills"];
+var expected = {"cats":{"spam":3,"notspam":2},"words":{"vicodin":{"spam":1},"pharmacy":{"spam":1},"on":{"spam":1,"notspam":1},"cheap":{"spam":1},"replica":{"spam":1},"watches":{"spam":1},"viagra":{"spam":1},"pills":{"spam":1},"unknown":{"notspam":1},"command":{"notspam":1},"line":{"notspam":1},"parameters":{"notspam":1},"I":{"notspam":1},"don":{"notspam":1},"t":{"notspam":1},"know":{"notspam":1},"if":{"notspam":1},"this":{"notspam":1},"works":{"notspam":1},"Windows":{"notspam":1}}};
 
-  var not = ["unknown command line parameters",
-             "I don't know if this works on Windows"]
+function testTo(bayes, async) {
+  var data = [{input: "vicodin pharmacy on", output: "spam"},
+              {input: "cheap replica watches", output: "spam"},
+              {input: "viagra pills", output: "spam"},
+              {input: "unknown command line parameters", output: "notspam"},
+              {input: "I don't know if this works on Windows", output: "notspam"}]
 
-  spam.forEach(function(text) { bayes.train(text, 'spam'); });
-  not.forEach(function(text) { bayes.train(text, 'notspam'); });
-  console.log(bayes.toJSON());
-  assert.deepEqual(bayes.toJSON(), {
-   {
-     cats: { spam: 3, notspam: 2 },
-     words: {
-        vicodin: { spam: 1 },
-        pharmacy: { spam: 1 },
-        on: { spam: 1, notspam: 1 },
-        cheap: { spam: 1 },
-        replica: { spam: 1 },
-        watches: { spam: 1 },
-        viagra: { spam: 1 },
-        pills: { spam: 1 },
-        unknown: { notspam: 1 },
-        command: { notspam: 1 },
-        line: { notspam: 1 },
-        parameters: { notspam: 1 },
-        I: { notspam: 1 },
-        don: { notspam: 1 },
-        t: { notspam: 1 },
-        know: { notspam: 1 },
-        if: { notspam: 1 },
-        this: { notspam: 1 },
-        works: { notspam: 1 },
-        Windows: { notspam: 1 }
-      }
-    }
-  );
+  bayes.trainAll(data, function() {
+    bayes.toJSON(function(json) {
+      assert.deepEqual(json, expected);
+    });
+  });
+  
+  if(!async)
+    assert.deepEqual(bayes.toJSON(), expected);  
 }
 
-// test the synchronous backends
-testBasic(new brain.BayesianClassifier());
+function testFrom(bayes, async) {
+  var bayes = bayes.fromJSON(expected, function() {
+    bayes.toJSON(function(json) {
+      assert.deepEqual(json, expected);  
+    })
+  });
+  
+  if(!async)
+    assert.deepEqual(bayes.toJSON(), expected);
+}
+
+testTo(new brain.BayesianClassifier());
+testTo(new brain.BayesianClassifier({
+  backend : {
+    type: 'localStorage',
+    options: {
+      name: 'testnamespace',
+      testing: true 
+    } 
+  }
+}));
+testTo(new brain.BayesianClassifier({
+  backend : {type: 'Redis'}
+}), true);
+
 
-testBasic(new brain.BayesianClassifier({
+testFrom(new brain.BayesianClassifier());
+testFrom(new brain.BayesianClassifier({
   backend : {
     type: 'localStorage',
     options: {
@@ -54,3 +56,6 @@ testBasic(new brain.BayesianClassifier({
     } 
   }
 }));
+testFrom(new brain.BayesianClassifier({
+  backend : {type: 'Redis'}
+}), true);
\ No newline at end of file
